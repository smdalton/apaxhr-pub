"""
Django settings for apaxhr docker_files.

Generated by 'django-admin startproject' using Django 3.0.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
# !/usr/bin/env python

import os

# Build paths inside the docker_files like this: os.path.join(BASE_DIR, ...)
from django.core.files.storage import FileSystemStorage
from celery.schedules import crontab

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
TEMPLATE_DIR = os.path.join(BASE_DIR, '/templates')
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/


AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',  # default
    'guardian.backends.ObjectPermissionBackend',
)

# EMAIL SETTINGS

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = 'apaxhremails@gmail.com'
EMAIL_HOST_PASSWORD = 'trashcanflight'

# static files settings


STATIC_URL = '/staticfiles/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)
AWS_DEFAULT_ACL = 'public-read'
num = 0
USE_S3 = os.getenv('USE_S3')

if num == 0:
    print("OS ENV FOR S3:--->", os.getenv('USE_S3'))
    num = 1

if USE_S3:
    AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
    AWS_DEFAULT_ACL = 'public-read'
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
    # s3 static settings
    AWS_LOCATION = 'static'

    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'
    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    # s3 media settings
    PUBLIC_MEDIA_LOCATION = 'media'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{PUBLIC_MEDIA_LOCATION}/'
    DEFAULT_FILE_STORAGE = 'apaxhr.storage_backends.PrivateMediaStorage'

    PRIVATE_MEDIA_LOCATION = 'private'
    PRIVATE_FILE_STORAGE = 'apaxhr.storage_backends.PrivateMediaStorage'

else:
    print('skipping S3')
    DEFAULT_FILESYSTEM_STORAGE = 'django.core.files.storage.FileSystemStorage'
    PRIVATE_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
    STATIC_URL = '/static/'
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'change me to a real key')

# SECURITY WARNING: don't run with debug turned on in production!


if os.environ.get('DEV') == 'TRUE':
    DEBUG = True
    ALLOWED_HOSTS = ['*']
#     INTERNAL_IPS = [
#     'localhost',
#     '127.0.0.1',
# ]
else:
    DEBUG = False
    ALLOWED_HOSTS = ['*']

# Application definition
CREATED_APPS = [
    # Applications

    'apaxhr',
    'users',
    'core_hr',
    'employment',
    'payroll',
    'employee_mgmt',
    'centers',

]

BASE_APPS = [
    # packages
    'djmoney',
    'livereload',
    'django.contrib.staticfiles',
    'admin_interface',
    'django.contrib.contenttypes',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.sessions',
    'django.contrib.messages',

]

EXTENSION_APPS = [
    # extensions
    'django_json_widget',
    'django_admin_listfilter_dropdown',
    'guardian',
    'colorfield',
    'crispy_forms',
    'django_countries',
    'django_nose',
    'storages',
    'django_extensions',
    'django_celery_results',
    'django_celery_beat',
]
if DEBUG:
    EXTENSION_APPS.append('debug_toolbar')

INSTALLED_APPS = CREATED_APPS + BASE_APPS + EXTENSION_APPS
# TODO: LOGGING
#  https://stackoverflow.com/questions/16876045/django-logging-only-for-my-apps


###______________ CELERY CONFIG__________________###
CELERY_BROKER_URL = 'amqp://guest:guest@rabbitmq:5672//'
CELERY_RESULT_BACKEND = 'redis://redis:6379'
CELERY_CACHE_BACKEND = 'default'
CELERY_ENABLE_UTC = False

CELERY_BEAT_SCHEDULE = {
    'hello': {
        'task': 'create_users_and_documents.hello',
        'schedule': crontab()  # execute every minute
    },
    'core_hr': {
        'task': 'core_hr.tasks.core_hr_task',
        'schedule': crontab()
    }

}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

CRISPY_TEMPLATE_PACK = 'bootstrap4'

TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'
NOSE_ARGS = [
    '--with-cover',
    '--cover-package=core_hr',
    '--cover-package=apaxhr',
    # Change `MY_APP` to your `app` name
]


def custom_show_toolbar(request):
    return True  # Always show toolbar, for example purposes only.

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]

if DEBUG:
    DEBUG_TOOLBAR_CONFIG = {
        'SHOW_TOOLBAR_CALLBACK': custom_show_toolbar,
        'DISABLE_PANELS': ( 'debug_toolbar.panels.templates.TemplatesPanel', 'debug_toolbar.panels.redirects.RedirectsPanel',),
        'SHOW_TEMPLATE_CONTEXT': False,
    }
    MIDDLEWARE.append('debug_toolbar.middleware.DebugToolbarMiddleware')

ROOT_URLCONF = 'apaxhr.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), ],
        'APP_DIRS': True,
        'OPTIONS': {

            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'apaxhr.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
if os.environ.get('PROD'):
    DATABASES = {
        "default": {
            "ENGINE": os.environ.get("SQL_ENGINE"),
            "NAME": os.environ.get("SQL_DATABASE"),
            "USER": os.environ.get("SQL_USER", "user"),
            "PASSWORD": os.environ.get("SQL_PASSWORD", "password"),
            "HOST": os.environ.get("SQL_HOST", "localhost"),
            "PORT": os.environ.get("SQL_PORT", "5432"),
        }
    }
else:
    # Disposable database made from a docker container
    DATABASES = {
        "default": {
            "ENGINE": 'django.db.backends.postgresql_psycopg2',
            "NAME": 'postgres-dev',
            "USER": "postgres-dev",
            "PASSWORD": os.environ.get("SQL_PASSWORD", "pass1234"),
            "HOST": os.environ.get("SQL_HOST", "localhost"),
            "PORT": os.environ.get("SQL_PORT", "5432"),
        }
    }
# CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
# CUSTOM USER MODEL
AUTH_USER_MODEL = 'users.Employee'

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

USE_TZ = True
TIME_ZONE = 'Asia/Ho_Chi_Minh'
CELERY_TIMEZONE = 'Asia/Ho_Chi_Minh'
USE_I18N = True

USE_L10N = False
DATE_FORMAT = 'd/m/Y'
DATE_INPUT_FORMATS = ['%d/%m/%Y', '%d/%m/%y', '%d %b %Y', ]

DATETIME_INPUT_FORMATS = [
    '%d/%m/%y',
    '%Y-%m-%d %H:%M:%S',
    '%Y-%m-%d %H:%M:%S.%f',
    '%Y-%m-%d %H:%M',
    '%Y-%m-%d',
    '%m/%d/%Y %H:%M:%S',
    '%m/%d/%Y %H:%M:%S.%f',
    '%m/%d/%Y %H:%M',
    '%m/%d/%Y',
    '%m/%d/%y %H:%M:%S',
    '%m/%d/%y %H:%M:%S.%f',
    '%m/%d/%y %H:%M',
    '%m/%d/%y']

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/
